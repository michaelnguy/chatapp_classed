[{"/Users/michael/Documents/wd/projects/chatapp_classed/client/src/index.js":"1","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/App.js":"2","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/Register.js":"3","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/ApolloProvider.js":"4","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/Login.js":"5","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/context/auth.js":"6","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/util/DynamicRoute.js":"7","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/home/Home.js":"8","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/home/Users.js":"9","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/context/message.js":"10","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/home/Messages.js":"11","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/home/Message.js":"12"},{"size":147,"mtime":1615451624888,"results":"13","hashOfConfig":"14"},{"size":1053,"mtime":1608151619386,"results":"15","hashOfConfig":"14"},{"size":3669,"mtime":1615319852819,"results":"16","hashOfConfig":"14"},{"size":1701,"mtime":1615493946092,"results":"17","hashOfConfig":"14"},{"size":2555,"mtime":1616718361864,"results":"18","hashOfConfig":"14"},{"size":1391,"mtime":1615393192984,"results":"19","hashOfConfig":"14"},{"size":453,"mtime":1615365158102,"results":"20","hashOfConfig":"14"},{"size":2539,"mtime":1615610052650,"results":"21","hashOfConfig":"14"},{"size":2191,"mtime":1615457208712,"results":"22","hashOfConfig":"14"},{"size":3320,"mtime":1615610000946,"results":"23","hashOfConfig":"14"},{"size":3446,"mtime":1615610069504,"results":"24","hashOfConfig":"14"},{"size":2953,"mtime":1615609961537,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"xrpk20",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/michael/Documents/wd/projects/chatapp_classed/client/src/index.js",[],["53","54"],"/Users/michael/Documents/wd/projects/chatapp_classed/client/src/App.js",[],"/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/Register.js",[],"/Users/michael/Documents/wd/projects/chatapp_classed/client/src/ApolloProvider.js",[],"/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/Login.js",[],"/Users/michael/Documents/wd/projects/chatapp_classed/client/src/context/auth.js",[],"/Users/michael/Documents/wd/projects/chatapp_classed/client/src/util/DynamicRoute.js",[],"/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/home/Home.js",["55","56"],"import React, { Fragment, useEffect } from 'react';\nimport { Row, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { gql, useSubscription } from '@apollo/client';\n\nimport { useAuthDispatch, useAuthState } from '../../context/auth';\nimport { useMessageDispatch } from '../../context/message';\n\nimport Users from './Users';\nimport Messages from './Messages';\n\nconst NEW_MESSAGE = gql`\n  subscription newMessage {\n    newMessage {\n      uuid\n      from\n      to\n      content\n      createdAt\n    }\n  }\n`;\n\nconst NEW_REACTION = gql`\n  subscription newReaction {\n    newReaction {\n      uuid\n      content\n      message {\n        uuid\n        from\n        to\n      }\n    }\n  }\n`;\n\nexport default function Home({ history }) {\n  const authDispatch = useAuthDispatch();\n  const messageDispatch = useMessageDispatch();\n\n  const { user } = useAuthState();\n\n  const { data: messageData, error: messageError } = useSubscription(\n    NEW_MESSAGE\n  );\n\n  const { data: reactionData, error: reactionError } = useSubscription(\n    NEW_REACTION\n  );\n\n  useEffect(() => {\n    if (messageError) console.log(messageError);\n\n    if (messageData) {\n      const message = messageData.newMessage;\n      const otherUser =\n        user.username === message.to ? message.from : message.to;\n\n      messageDispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          username: otherUser,\n          message,\n        },\n      });\n    }\n  }, [messageError, messageData]);\n\n  useEffect(() => {\n    if (reactionError) console.log(reactionError);\n\n    if (reactionData) {\n      const reaction = reactionData.newReaction;\n      const otherUser =\n        user.username === reaction.message.to\n          ? reaction.message.from\n          : reaction.message.to;\n\n      messageDispatch({\n        type: 'ADD_REACTION',\n        payload: {\n          username: otherUser,\n          reaction,\n        },\n      });\n    }\n  }, [reactionError, reactionData]);\n\n  const logout = () => {\n    authDispatch({ type: 'LOGOUT' });\n    window.location.href = '/login';\n  };\n\n  return (\n    <Fragment>\n      <Row className='bg-white justify-content-around mb-1'>\n        <Link to='/login'>\n          <Button variant='link'>Login</Button>\n        </Link>\n        <Link to='/register'>\n          <Button variant='link'>Register</Button>\n        </Link>\n        <Button variant='link' onClick={logout}>\n          Logout\n        </Button>\n      </Row>\n      <Row className='bg-white'>\n        <Users />\n        <Messages />\n      </Row>\n    </Fragment>\n  );\n}\n","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/home/Users.js",[],"/Users/michael/Documents/wd/projects/chatapp_classed/client/src/context/message.js",[],"/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/home/Messages.js",["57","58"],"import React, { Fragment, useEffect, useState } from 'react';\nimport { gql, useLazyQuery, useMutation } from '@apollo/client';\nimport { Col, Form } from 'react-bootstrap';\n\nimport { useMessageDispatch, useMessageState } from '../../context/message';\n\nimport Message from './Message';\n\nconst SEND_MESSAGE = gql`\n  mutation sendMessage($to: String!, $content: String!) {\n    sendMessage(to: $to, content: $content) {\n      uuid\n      from\n      to\n      content\n      createdAt\n    }\n  }\n`;\n\nconst GET_MESSAGES = gql`\n  query getMessages($from: String!) {\n    getMessages(from: $from) {\n      uuid\n      from\n      to\n      content\n      createdAt\n      reactions {\n        uuid\n        content\n      }\n    }\n  }\n`;\n\nexport default function Messages() {\n  const { users } = useMessageState();\n  const dispatch = useMessageDispatch();\n  const [content, setContent] = useState('');\n\n  const selectedUser = users?.find((u) => u.selected === true);\n  const messages = selectedUser?.messages;\n\n  const [\n    getMessages,\n    { loading: messagesLoading, data: messagesData },\n  ] = useLazyQuery(GET_MESSAGES);\n\n  const [sendMessage] = useMutation(SEND_MESSAGE, {\n    onError: (err) => console.log(err),\n  });\n\n  useEffect(() => {\n    if (selectedUser && !selectedUser.messages) {\n      getMessages({ variables: { from: selectedUser.username } });\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    if (messagesData) {\n      dispatch({\n        type: 'SET_USER_MESSAGES',\n        payload: {\n          username: selectedUser.username,\n          messages: messagesData.getMessages,\n        },\n      });\n    }\n  }, [messagesData]);\n\n  const submitMessage = (e) => {\n    e.preventDefault();\n\n    if (content.trim() === '' || !selectedUser) return;\n\n    setContent('');\n\n    // mutation for sending the message\n    sendMessage({ variables: { to: selectedUser.username, content } });\n  };\n\n  let selectedChatMarkup;\n  if (!messages && !messagesLoading) {\n    selectedChatMarkup = <p className='info-text'>Select a friend</p>;\n  } else if (messagesLoading) {\n    selectedChatMarkup = <p className='info-text'>Loading..</p>;\n  } else if (messages.length > 0) {\n    selectedChatMarkup = messages.map((message, index) => (\n      <Fragment key={message.uuid}>\n        <Message message={message} />\n        {index === messages.length - 1 && (\n          <div className='invisible'>\n            <hr className='m-0' />\n          </div>\n        )}\n      </Fragment>\n    ));\n  } else if (messages.length === 0) {\n    selectedChatMarkup = (\n      <p className='info-text'>\n        You are now connected! send your first message!\n      </p>\n    );\n  }\n\n  return (\n    <Col xs={10} md={8} className='p-0'>\n      <div className='messages-box d-flex flex-column-reverse p-3'>\n        {selectedChatMarkup}\n      </div>\n      <div className='px-3 py-2'>\n        <Form onSubmit={submitMessage}>\n          <Form.Group className='d-flex align-items-center m-0'>\n            <Form.Control\n              type='text'\n              className='message-input rounded-pill p-4 bg-secondary border-0'\n              placeholder='Type a message..'\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n            />\n            <i\n              className='fas fa-paper-plane fa-2x text-primary ml-2'\n              onClick={submitMessage}\n              role='button'\n            ></i>\n          </Form.Group>\n        </Form>\n      </div>\n    </Col>\n  );\n}\n","/Users/michael/Documents/wd/projects/chatapp_classed/client/src/pages/home/Message.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":68,"column":6,"nodeType":"65","endLine":68,"endColumn":33,"suggestions":"66"},{"ruleId":"63","severity":1,"message":"64","line":88,"column":6,"nodeType":"65","endLine":88,"endColumn":35,"suggestions":"67"},{"ruleId":"63","severity":1,"message":"68","line":58,"column":6,"nodeType":"65","endLine":58,"endColumn":20,"suggestions":"69"},{"ruleId":"63","severity":1,"message":"70","line":70,"column":6,"nodeType":"65","endLine":70,"endColumn":20,"suggestions":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'messageDispatch' and 'user.username'. Either include them or remove the dependency array.","ArrayExpression",["74"],["75"],"React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["76"],"React Hook useEffect has missing dependencies: 'dispatch' and 'selectedUser.username'. Either include them or remove the dependency array.",["77"],"no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [messageError, messageData, user.username, messageDispatch]",{"range":"86","text":"87"},"Update the dependencies array to be: [reactionError, reactionData, user.username, messageDispatch]",{"range":"88","text":"89"},"Update the dependencies array to be: [getMessages, selectedUser]",{"range":"90","text":"91"},"Update the dependencies array to be: [dispatch, messagesData, selectedUser.username]",{"range":"92","text":"93"},[1450,1477],"[messageError, messageData, user.username, messageDispatch]",[1920,1949],"[reactionError, reactionData, user.username, messageDispatch]",[1350,1364],"[getMessages, selectedUser]",[1604,1618],"[dispatch, messagesData, selectedUser.username]"]